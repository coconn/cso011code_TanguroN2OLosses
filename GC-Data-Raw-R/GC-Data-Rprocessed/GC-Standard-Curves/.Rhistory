timezeroLabs <- as.data.frame(as.matrix(timezeroLabels),stringsAsFactors=F)
timezeroLabs <- timezeroLabs$SampleName
timezeroLabs[(tmplength+1):(tmplength+6)]<-c("time zero mean", "time zero sd", "time zero CV", "time zero sd allow" ,"time zero upper limit", "time zero lower limit")
timezeroDF <- data.frame(timezeroLabs,timezeroNinfo,timezeroCinfo,timezeroCHinfo)
timezeroDF$GCrun <- runsheet$GCRun[1:(tmplength+6)]
########################################################################
# PRINT WARNINGS
# save to txt file
mywarnings <- paste(pathsavefiles, "warnings_", filestoprocess[i], ".csv", sep = "")
# are there many no pressure vials?
cat(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n")
# are the standards curves poor quality?
cat(paste("STD CURVES INFO: the Pearson's R^2 for N2O HIGH was ", round(lmN2Ohigh_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n")
cat(paste("STD CURVES INFO: the Pearson's R^2 for N2O LOW was ", round(lmN2Olow_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("STD CURVES INFO: the Pearson's R^2 for CO2 HIGH was ", round(lmCO2high_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("STD CURVES INFO: the Pearson's R^2 for CO2 LOW was ", round(lmCO2low_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("STD CURVES INFO: the Pearson's R^2 for CH4 HIGH was ", round(lmCH4high_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("STD CURVES INFO: the Pearson's R^2 for CH4 LOW was ", round(lmCH4low_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
# is there high variability in the ambient vials?
indAMB = which(ambinfoDF$Labels=="CV")
cat(paste("AMBIENT VIAL INFO: the CV for N2O was ", round(ambinfoDF$ambNinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("AMBIENT VIAL INFO: the CV for CO2 was ", round(ambinfoDF$ambCinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("AMBIENT VIAL INFO: the CV for CH4 was ", round(ambinfoDF$ambCHinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
# is there high variability in the time zero vials?
indTZ = which(timezeroDF$timezeroLabs=="time zero CV")
cat(paste("TIME ZERO INFO: the CV for N2O was ", round(timezeroDF$timezeroNinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("TIME ZERO INFO: the CV for CO2 was ", round(timezeroDF$timezeroCinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
cat(paste("TIME ZERO INFO: the CV for CH4 was ", round(timezeroDF$timezeroCHinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""), file=mywarnings,sep="\n",append=TRUE)
#cat(HERE, file=mywarnings,sep="\n",append=TRUE)
# print these statements for the viewer to see
print(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for N2O HIGH was ", round(lmN2Ohigh_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for N2O LOW was ", round(lmN2Olow_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for CO2 HIGH was ", round(lmCO2high_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for CO2 LOW was ", round(lmCO2low_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for CH4 HIGH was ", round(lmCH4high_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("STD CURVES INFO: the Pearson's R^2 for CH4 LOW was ", round(lmCH4low_pearsonsR2, digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("AMBIENT VIAL INFO: the CV for N2O was ", round(ambinfoDF$ambNinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("AMBIENT VIAL INFO: the CV for CO2 was ", round(ambinfoDF$ambCinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("AMBIENT VIAL INFO: the CV for CH4 was ", round(ambinfoDF$ambCHinfo[indAMB], digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("TIME ZERO INFO: the CV for N2O was ", round(timezeroDF$timezeroNinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("TIME ZERO INFO: the CV for CO2 was ", round(timezeroDF$timezeroCinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""))
print(paste("TIME ZERO INFO: the CV for CH4 was ", round(timezeroDF$timezeroCHinfo[indTZ], digits=4), ".  File = ", filestoprocess[i], sep = ""))
# readline(prompt = "ready to move on?  press return.  ")
########################################################################
# SAVE VENTEREA-STYLE EXCEL GC RUN SUMMARY SHEET
# prep data into list
NoPressureCounttab <- data.table(NoPressureCount)
GCRun <- data.table(GCRun=filestoprocess[i])
summarysheetdata = list(GCRun=GCRun, NoPressureCount=NoPressureCounttab,
ambinfoDF=ambinfoDF, timezeroDF=timezeroDF,
standardvialsN2O=stdtabN2O, standardvialsCO2=stdtabCO2, standardvialsCH4=stdtabCH4,
StandardCurveInfo_lmN2Ohigh=lmN2Otab1, StandardCurveInfo_lmN2Olow=lmN2Otab2,
StandardCurveInfo_lmCO2high=lmCO2tab1, StandardCurveInfo_lmCO2low=lmCO2tab2,
StandardCurveInfo_lmCH4high=lmCH4tab1, StandardCurveInfo_lmCH4low=lmCH4tab2)
# where to save excel sheet
pathsavesummary = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/GC-Runs-Summary-Info/"
# reminder: GC run named filestoprocess[i]
# if excel file already exists, delete it
if (file.exists(paste(pathsavesummary,"GCRunSummary_", filestoprocess[i], ".xlsx", sep=""))) {
file.remove(paste(pathsavesummary,"GCRunSummary_", filestoprocess[i], ".xlsx", sep=""))
}
# XLConnect stuff
wb = loadWorkbook(paste(pathsavesummary,"GCRunSummary_", filestoprocess[i], ".xlsx", sep=""), create = TRUE)
# Create a new sheet
createSheet(wb, name = "GCRunSummaryInfo")
# cumulative length (rows) of matrices
# +2 = 1 for list names, 1 for header row
cumlen = cumsum(c(1, head(sapply(summarysheetdata, nrow), n = -1) + 3))
# Write data rows (implicitly vectorized!)
writeWorksheet(wb, data = summarysheetdata, sheet = "GCRunSummaryInfo", startRow = cumlen + 1, header = TRUE)
# Write list names
writeWorksheet(wb, data = as.list(names(summarysheetdata)), sheet = "GCRunSummaryInfo", startRow = cumlen, header = FALSE)
# insert standard curve image into worksheet - create a named region called 'graphs'
createName(wb, name = "graphs", formula = "GCRunSummaryInfo!$H$5", overwrite = TRUE)
# Write image to the named region created above
setwd(pathsavefigs)
addImage(wb, filename = paste("StandardCurves_", filestoprocess[i], ".png", sep=""), name="graphs", originalSize = TRUE)
saveWorkbook(wb)
########################################################################
# SAVE CSV FILES, BIND OUTCOMES ONTO  RUNNING SUMMARY FILES
# put GC run info into data frame
vialDF$GCrun <- runsheet$GCRun
# define files to save
mycsvvialDF <- paste(pathsavefiles, "vialDF_", filestoprocess[i], ".csv", sep = "")
mycsvambinfoDF <- paste(pathsavefiles, "ambinfoDF_", filestoprocess[i], ".csv", sep = "")
mycsvtimezeroDF <- paste(pathsavefiles, "timezeroDF_", filestoprocess[i], ".csv", sep = "")
# save vialDF, ambinfoDF, timezeroDF as csv
write.csv(vialDF, file=mycsvvialDF, row.names=FALSE)
write.csv(ambinfoDF, file=mycsvambinfoDF, row.names=FALSE)
write.csv(timezeroDF, file=mycsvtimezeroDF, row.names=FALSE)
# bind vialDF, ambinfoDF, timezeroDF onto running dfs
vialDFfull <- rbind(vialDFfull, vialDF)
ambinfoDFfull <- rbind(ambinfoDFfull, ambinfoDF)
timezeroDFfull <- rbind(timezeroDFfull, timezeroDF)
}
# write full DF files as csv files
write.csv(vialDFfull, file=paste(pathsavefiles, "vialDFfull.csv", sep = ""), row.names=FALSE)
write.csv(ambinfoDFfull, file=paste(pathsavefiles, "ambinfoDFfull.csv", sep = ""), row.names=FALSE)
write.csv(timezeroDFfull, file=paste(pathsavefiles, "timezeroDFfull.csv", sep = ""), row.names=FALSE)
# write all warnings into a single file
warningsfiles <- list.files(path=pathsavefiles, pattern = "warnings_*", full.names=TRUE, ignore.case = TRUE)
dataset <- do.call("rbind",lapply(warningsfiles, FUN=function(files){read.table(files, header=FALSE, sep="\t")}))
# why do the first rows print weird?  fix this eventually.
write.csv(dataset, file=paste(pathsavefiles, "warningsfull.csv", sep = ""), row.names=FALSE)
########################################################################
# END LOOP
########################################################################
# NOTES AND TESTING
# testing update: for filestoprocess = "20140310_U" this matches the venterea excel exactly!
# thing that was keeping them different was the temperature correction.  above, the standards don't get a temperature correction, but everything else does
# no or low pressure vials get removed in FluxCalc-Rcode.R
########################################################################
# WAS ON TO DO LIST, NOW DONE
# instead of printing warning in a more readable way, just built in a "venterea style summary" page to get printed
clc()
vialDFfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/vialDFfull.csv", stringsAsFactors=FALSE)
View(vialDFfull)
View(vialDFfull)
View(vialDFfull)
vialDFfull$easycallname <- do.call(paste, c(vialDFfull[c("Site", "SampleDate", "Chamber")], sep = "_"))
View(timezeroDFfull)
View(timezeroDFfull)
View(vialDFfull)
toMatch <- c("M8", "K4", "MU")
subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$easycallname))
toMatch <- c("M8", "K4", "MU")
subset(vialDFfull, grep(paste(toMatch,collapse="|"), vialDFfull$easycallname))
toMatch <- c("^M8", "K4", "MU")
subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$easycallname))
vialDFfull$easycallname
vialDFfull$SampleName
vialDFfull[grep("^K4", vialDFfull$SampleName), ]
vialDFfull[grep("^MU", vialDFfull$SampleName), ]
vialDFfull[grep("MU", vialDFfull$SampleName), ]
subset(vialDFfull, grepl("MU", vialDFfull$SampleName))
tmp<-subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
View(tmp)
toMatch <- c("M8", "K4", "MU")
tmp<-subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
View(tmp)
toMatch <- c("M8", "K4", "MU", "C2", "cm")
tmp<-subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
View(tmp)
zen()
# PitCalcs-Rcode.R
# taking trace gas vial data associated with soil pits and making a tidy data set
# disrupted N project
# CS O'Connell, UMN EEB/IonE
# requires files created in GC-Rcode-fileloop.R
# output products:
# pitgasfull.csv : master csv of soil pit gas sampling
########################################################################
# BRING IN DATA, MAKE DATAFRAME
vialDFfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/vialDFfull.csv", stringsAsFactors=FALSE)
# make new column to ensure no repeats (easycallname = unique per chamber)
vialDFfull$easycallname <- do.call(paste, c(vialDFfull[c("Site", "SampleDate", "Chamber")], sep = "_"))
#in case I want to see all the names outside of R environment
#write.csv(vialDFfull, file=paste("vialDFfull_prac.csv", sep = ""), row.names=FALSE)
# where to save outputs
pathsavefiles = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/"
pathsavefigs = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/PitGasFigures/"
toMatch <- c("cm") #"M8", "K4", "MU", "C2" # C2 doesn't work because it goes with some side-by-side chamber trials
tmp <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
View(tmp)
pitgas <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
View(pitgas)
which(pitgas$Pressure=="L")
which(pitgas$Pressure=="LP")
?which
pitgas$Pressure=="N"
pitgas$Pressure=="LP"
nopressureid <- pitgas$Pressure=="LP"
ngN_cm3_N2O[nopressureid] <- NA
pitgas$ngN_cm3_N2O[nopressureid] <- NA
View(pitgas)
pitgas$ngC_cm3_CO2[nopressureid] <- NA
pitgas$ngC_cm3_CH4[nopressureid] <- NA
View(pitgas)
toMatch <- c("cm") #"M8", "K4", "MU", "C2" # C2 doesn't work because it goes with some side-by-side chamber trials
pitgas <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
nopressureid <- pitgas$Pressure=="N"
pitgas$ngN_cm3_N2O[nopressureid] <- NA
pitgas$ngC_cm3_CO2[nopressureid] <- NA
pitgas$ngC_cm3_CH4[nopressureid] <- NA
View(pitgas)
pitgas[grep("_Rerun", pitgas$SampleName), ]
pitgas[grep("_rerun", pitgas$SampleName), ]
pitgas[grepl("_rerun", pitgas$SampleName), ]
pitgas[grep("rerun_", pitgas$SampleName), ]
pitgas[grep("Rerun_", pitgas$SampleName), ]
grep("Rerun_", pitgas$SampleName)
tmp <- grep("Rerun_", pitgas$SampleName)
pitgas[tmp, ]
pitgas[tmp, 2]
pitgas[tmp, N2Oc]
pitgas[tmp, pitgas$N2Oc]
pitgas[tmp, 13]
pitgas$N2Oppm[tmp, ]
pitgas$N2Oppm[tmp]
pitgas$ngN_cm3_N2O[tmp] <- NA
View(pitgas)
pitgas$N2Oppm[nopressureid] <- NA
pitgas$CO2ppm[nopressureid] <- NA
pitgas$CH4ppm[nopressureid] <- NA
View(pitgas)
pitgas$ngN_cm3_N2O[tmp] & pitgas$ngC_cm3_CO2[tmp] <- NA
rerunid <- grep("Rerun_", pitgas$SampleName)
pitgas$ngN_cm3_N2O[rerunid] <- NA
pitgas$ngC_cm3_CO2[rerunid] <- NA
pitgas$ngC_cm3_CH4[rerunid] <- NA
pitgas$N2Oppm[rerunid] <- NA
pitgas$CO2ppm[rerunid] <- NA
pitgas$CH4ppm[rerunid] <- NA
View(pitgas)
nodata <- pitgas$N2Oraw<0.01
nodata
pitgas$ngN_cm3_N2O[nodata] <- NA
pitgas$ngC_cm3_CO2[nodata] <- NA
pitgas$ngC_cm3_CH4[nodata] <- NA
pitgas$N2Oppm[nodata] <- NA
pitgas$CO2ppm[nodata] <- NA
pitgas$CH4ppm[nodata] <- NA
View(pitgas)
nodata
is.false(nodata)
sum(nodata)
nodata <- pitgas$N2Oraw<1
sum(nodata)
nodata <- pitgas$N2Oraw<2
sum(nodata)
nodata <- pitgas$N2Oraw<1.0
nodata
NoPressureCount <- length(which(pitgas$Pressure=="N"))
NoPressureCount
print(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.", sep = ""))
nodata
sum(nodata)
zen()
# PitCalcs-Rcode.R
# taking trace gas vial data associated with soil pits and making a tidy data set
# disrupted N project
# CS O'Connell, UMN EEB/IonE
# requires files created in GC-Rcode-fileloop.R
# output products:
# pitgasfull.csv : master csv of soil pit gas sampling
########################################################################
# BRING IN DATA, MAKE DATAFRAME
vialDFfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/vialDFfull.csv", stringsAsFactors=FALSE)
# make new column to ensure no repeats (easycallname = unique per chamber)
vialDFfull$easycallname <- do.call(paste, c(vialDFfull[c("Site", "SampleDate", "Chamber")], sep = "_"))
#in case I want to see all the names outside of R environment
#write.csv(vialDFfull, file=paste("vialDFfull_prac.csv", sep = ""), row.names=FALSE)
# where to save outputs
pathsavefiles = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/"
pathsavefigs = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/PitGasFigures/"
########################################################################
# GET PIT DATA
# Pits: m8, k4, c2 (forest); mu (mutun, soy)
toMatch <- c("cm") #"M8", "K4", "MU", "C2" # C2 doesn't work because it goes with some side-by-side chamber trials
pitgas <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
########################################################################
# ELIMINATE UNACCEPTABLE DATA
# no pressure vials
nopressureid <- pitgas$Pressure=="N"
NoPressureCount <- length(which(pitgas$Pressure=="N"))
pitgas$ngN_cm3_N2O[nopressureid] <- NA
pitgas$ngC_cm3_CO2[nopressureid] <- NA
pitgas$ngC_cm3_CH4[nopressureid] <- NA
pitgas$N2Oppm[nopressureid] <- NA
pitgas$CO2ppm[nopressureid] <- NA
pitgas$CH4ppm[nopressureid] <- NA
# some vials got repeated because of GC autosampler problems
rerunid <- grep("Rerun_", pitgas$SampleName)
pitgas$ngN_cm3_N2O[rerunid] <- NA
pitgas$ngC_cm3_CO2[rerunid] <- NA
pitgas$ngC_cm3_CH4[rerunid] <- NA
pitgas$N2Oppm[rerunid] <- NA
pitgas$CO2ppm[rerunid] <- NA
pitgas$CH4ppm[rerunid] <- NA
# any other vials that didn't seem to get sampled?
nodata <- pitgas$N2Oraw<1.0
pitgas$ngN_cm3_N2O[nodata] <- NA
pitgas$ngC_cm3_CO2[nodata] <- NA
pitgas$ngC_cm3_CH4[nodata] <- NA
pitgas$N2Oppm[nodata] <- NA
pitgas$CO2ppm[nodata] <- NA
pitgas$CH4ppm[nodata] <- NA
# recall that all three of these vials got rerun in the GC, so there is no data that is truly missing, only blank rows to be struck
# print info
print(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.", sep = ""))
pitgasfull <- pitgas
write.csv(pitgasfull, file=paste(pathsavefiles, "pitgasfull.csv", sep = ""), row.names=FALSE)
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
grep("M8", pitgas$SampleName)
pitgas
dim(grep("Rerun_", pitgas$SampleName))
grep("M8", pitgas$SampleName)
tmp<-pitgas$pitID[grep("M8", pitgas$SampleName)]
dim(tmp)
tmp
tmp<-pitgas[grep("M8", pitgas$SampleName)]
tmp<-pitgas[grep("M8", pitgas$SampleName),]
tmp
pitgas$pitID <- "NA"
View(pitgas)
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
View(pitgas)
pitgas$pitID <- -99
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
View(pitgas)
pitgas$pitID <- -9999
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
pitgas$pitID[grep("K4", pitgas$SampleName)] <- "K4"
pitgas$pitID[grep("MU", pitgas$SampleName)] <- "MU"
pitgas$pitID[grep("C2", pitgas$SampleName)] <- "C2"
View(pitgas)
pitgas$sampledepth <- -9999
pitgas$sampledepth <- -9999
pitgas$sampledepth[grep("15cm", pitgas$SampleName)] <- 15
pitgas$sampledepth[grep("40cm", pitgas$SampleName)] <- 40
pitgas$sampledepth[grep("75cm", pitgas$SampleName)] <- 75
pitgas$sampledepth[grep("150cm", pitgas$SampleName)] <- 150
pitgas$sampledepth[grep("250cm", pitgas$SampleName)] <- 250
pitgas$sampledepth[grep("350cm", pitgas$SampleName)] <- 350
pitgas$sampledepth[grep("450cm", pitgas$SampleName)] <- 450
View(pitgas)
zen()
# PitCalcs-Rcode.R
# taking trace gas vial data associated with soil pits and making a tidy data set
# disrupted N project
# CS O'Connell, UMN EEB/IonE
# requires files created in GC-Rcode-fileloop.R
# output products:
# pitgasfull.csv : master csv of soil pit gas sampling
########################################################################
# BRING IN DATA, MAKE DATAFRAME
vialDFfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/vialDFfull.csv", stringsAsFactors=FALSE)
# make new column to ensure no repeats (easycallname = unique per chamber)
vialDFfull$easycallname <- do.call(paste, c(vialDFfull[c("Site", "SampleDate", "Chamber")], sep = "_"))
#in case I want to see all the names outside of R environment
#write.csv(vialDFfull, file=paste("vialDFfull_prac.csv", sep = ""), row.names=FALSE)
# where to save outputs
pathsavefiles = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/"
pathsavefigs = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/PitGasFigures/"
########################################################################
# GET PIT DATA
# Pits: m8, k4, c2 (forest); mu (mutun, soy)
toMatch <- c("cm") #"M8", "K4", "MU", "C2" # C2 doesn't work because it goes with some side-by-side chamber trials
pitgas <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
########################################################################
# ELIMINATE UNACCEPTABLE DATA
# no pressure vials
nopressureid <- pitgas$Pressure=="N"
NoPressureCount <- length(which(pitgas$Pressure=="N"))
pitgas$ngN_cm3_N2O[nopressureid] <- NA
pitgas$ngC_cm3_CO2[nopressureid] <- NA
pitgas$ngC_cm3_CH4[nopressureid] <- NA
pitgas$N2Oppm[nopressureid] <- NA
pitgas$CO2ppm[nopressureid] <- NA
pitgas$CH4ppm[nopressureid] <- NA
# some vials got repeated because of GC autosampler problems
rerunid <- grep("Rerun_", pitgas$SampleName)
pitgas$ngN_cm3_N2O[rerunid] <- NA
pitgas$ngC_cm3_CO2[rerunid] <- NA
pitgas$ngC_cm3_CH4[rerunid] <- NA
pitgas$N2Oppm[rerunid] <- NA
pitgas$CO2ppm[rerunid] <- NA
pitgas$CH4ppm[rerunid] <- NA
# any other vials that didn't seem to get sampled?
nodata <- pitgas$N2Oraw<1.0
pitgas$ngN_cm3_N2O[nodata] <- NA
pitgas$ngC_cm3_CO2[nodata] <- NA
pitgas$ngC_cm3_CH4[nodata] <- NA
pitgas$N2Oppm[nodata] <- NA
pitgas$CO2ppm[nodata] <- NA
pitgas$CH4ppm[nodata] <- NA
# recall that all three of these vials got rerun in the GC, so there is no data that is truly missing, only blank rows to be struck
# print info
print(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.", sep = ""))
########################################################################
# ADD USEFUL COLUMNS
# pit ID
pitgas$pitID <- -9999
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
pitgas$pitID[grep("K4", pitgas$SampleName)] <- "K4"
pitgas$pitID[grep("MU", pitgas$SampleName)] <- "MU"
pitgas$pitID[grep("C2", pitgas$SampleName)] <- "C2"
# depth
pitgas$sampledepth <- -9999
pitgas$sampledepth[grep("15cm", pitgas$SampleName)] <- 15
pitgas$sampledepth[grep("40cm", pitgas$SampleName)] <- 40
pitgas$sampledepth[grep("75cm", pitgas$SampleName)] <- 75
pitgas$sampledepth[grep("150cm", pitgas$SampleName)] <- 150
pitgas$sampledepth[grep("250cm", pitgas$SampleName)] <- 250
pitgas$sampledepth[grep("350cm", pitgas$SampleName)] <- 350
pitgas$sampledepth[grep("450cm", pitgas$SampleName)] <- 450
########################################################################
# SAVE CSV
# save pitgasfull as csv file
pitgasfull <- pitgas
write.csv(pitgasfull, file=paste(pathsavefiles, "pitgasfull.csv", sep = ""), row.names=FALSE)
########################################################################
# NOTES AND TESTING
grep("R", pitgas$site)
grep("R", pitgas$Site)
pitgas$SampleName[Rid]
Rid <- grep("R", pitgas$Site)
pitgas$SampleName[Rid]
samplenamesRe <- pitgas$SampleName[grep("R", pitgas$Site)]
samplenamesRe
substr("abcdef", 2, 4)
substr(samplenamesRe, 2, 4)
samplenamesRe
substr(samplenamesRe, 6, 8)
substr(samplenamesRe, 7, 8)
substr(samplenamesRe, 7, 7)
pitgas$Site[Rid] <- sitetmp
Rid <- grep("R", pitgas$Site)
samplenamesRe <- pitgas$SampleName[Rid]
sitetmp <- substr(samplenamesRe, 7, 8)
LUtmp <- substr(samplenamesRe, 7, 7)
pitgas$Site[Rid] <- sitetmp
View(pitgas)
Rid
pitgas$LUtype[Rid] <- LUtmp
View(pitgas)
zen()
# PitCalcs-Rcode.R
# taking trace gas vial data associated with soil pits and making a tidy data set
# disrupted N project
# CS O'Connell, UMN EEB/IonE
# requires files created in GC-Rcode-fileloop.R
# output products:
# pitgasfull.csv : master csv of soil pit gas sampling
########################################################################
# BRING IN DATA, MAKE DATAFRAME
vialDFfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/GC-Data-Rprocessed/vialDFfull.csv", stringsAsFactors=FALSE)
# make new column to ensure no repeats (easycallname = unique per chamber)
vialDFfull$easycallname <- do.call(paste, c(vialDFfull[c("Site", "SampleDate", "Chamber")], sep = "_"))
#in case I want to see all the names outside of R environment
#write.csv(vialDFfull, file=paste("vialDFfull_prac.csv", sep = ""), row.names=FALSE)
# where to save outputs
pathsavefiles = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/"
pathsavefigs = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Pit-Data-Rprocessed/PitGasFigures/"
########################################################################
# GET PIT DATA
# Pits: m8, k4, c2 (forest); mu (mutun, soy)
toMatch <- c("cm") #"M8", "K4", "MU", "C2" # C2 doesn't work because it goes with some side-by-side chamber trials
pitgas <- subset(vialDFfull, grepl(paste(toMatch,collapse="|"), vialDFfull$SampleName))
########################################################################
# ELIMINATE UNACCEPTABLE DATA
# no pressure vials
nopressureid <- pitgas$Pressure=="N"
NoPressureCount <- length(which(pitgas$Pressure=="N"))
pitgas$ngN_cm3_N2O[nopressureid] <- NA
pitgas$ngC_cm3_CO2[nopressureid] <- NA
pitgas$ngC_cm3_CH4[nopressureid] <- NA
pitgas$N2Oppm[nopressureid] <- NA
pitgas$CO2ppm[nopressureid] <- NA
pitgas$CH4ppm[nopressureid] <- NA
# print info
print(paste("VIAL PRESSURE INFO: there was/were ", NoPressureCount, " vial(s) with no pressure.", sep = ""))
# some vials got repeated because of GC autosampler problems
rerunid <- grep("Rerun_", pitgas$SampleName)
pitgas$ngN_cm3_N2O[rerunid] <- NA
pitgas$ngC_cm3_CO2[rerunid] <- NA
pitgas$ngC_cm3_CH4[rerunid] <- NA
pitgas$N2Oppm[rerunid] <- NA
pitgas$CO2ppm[rerunid] <- NA
pitgas$CH4ppm[rerunid] <- NA
# any other vials that didn't seem to get sampled?
nodata <- pitgas$N2Oraw<1.0
pitgas$ngN_cm3_N2O[nodata] <- NA
pitgas$ngC_cm3_CO2[nodata] <- NA
pitgas$ngC_cm3_CH4[nodata] <- NA
pitgas$N2Oppm[nodata] <- NA
pitgas$CO2ppm[nodata] <- NA
pitgas$CH4ppm[nodata] <- NA
# recall that all three of these vials got rerun in the GC, so there is no data that is truly missing, only blank rows to be struck
# some of the land use codes are "r" because of the rerun vials
# site and LUtype have "re" and "r"
Rid <- grep("R", pitgas$Site)
samplenamesRe <- pitgas$SampleName[Rid]
sitetmp <- substr(samplenamesRe, 7, 8)
LUtmp <- substr(samplenamesRe, 7, 7)
pitgas$Site[Rid] <- sitetmp
pitgas$LUtype[Rid] <- LUtmp
########################################################################
# ADD USEFUL COLUMNS
# pit ID
pitgas$pitID <- -9999
pitgas$pitID[grep("M8", pitgas$SampleName)] <- "M8"
pitgas$pitID[grep("K4", pitgas$SampleName)] <- "K4"
pitgas$pitID[grep("MU", pitgas$SampleName)] <- "MU"
pitgas$pitID[grep("C2", pitgas$SampleName)] <- "C2"
# depth
pitgas$sampledepth <- -9999
pitgas$sampledepth[grep("15cm", pitgas$SampleName)] <- 15
pitgas$sampledepth[grep("40cm", pitgas$SampleName)] <- 40
pitgas$sampledepth[grep("75cm", pitgas$SampleName)] <- 75
pitgas$sampledepth[grep("150cm", pitgas$SampleName)] <- 150
pitgas$sampledepth[grep("250cm", pitgas$SampleName)] <- 250
pitgas$sampledepth[grep("350cm", pitgas$SampleName)] <- 350
pitgas$sampledepth[grep("450cm", pitgas$SampleName)] <- 450
########################################################################
# SAVE CSV
# save pitgasfull as csv file
pitgasfull <- pitgas
write.csv(pitgasfull, file=paste(pathsavefiles, "pitgasfull.csv", sep = ""), row.names=FALSE)
########################################################################
# NOTES AND TESTING
