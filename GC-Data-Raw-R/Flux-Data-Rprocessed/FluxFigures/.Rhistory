rect(breaks[-nB], 0, breaks[-1], y, col="cyan", …)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.lm)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
## R, show me my pairs panel plots:
pairs.panels(corrdf)
## Hello R, I want straight linear regression lines on my scatterplot called panel.lm
"panel.lm" <-
function (x, y, pch = par("pch"),
col.lm = "red", …)
{ ymin <- min(y)
ymax <- max(y)
xmin <- min(x)
xmax <- max(x)
ylim <- c(min(ymin,xmin),max(ymax,xmax))
xlim <- ylim
points(x, y, pch = pch,ylim = ylim, xlim= xlim,…)
ok <- is.finite(x) & is.finite(y)
if (any(ok))
abline(lm(y[ok]~ x[ok]),
col = col.lm, …)
}
## Next, R please make me a series of pairs plots comparing all the varables, and list correlation vaues:
panel.cor.scale <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex )
}
panel.hist <- function(x, …)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", …)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.lm)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
## R, show me my pairs panel plots:
pairs.panels(corrdf)
panel.lm <- function (x, y, pch = par("pch"),
col.lm = "red", …)
{ ymin <- min(y)
ymax <- max(y)
xmin <- min(x)
xmax <- max(x)
ylim <- c(min(ymin,xmin),max(ymax,xmax))
xlim <- ylim
points(x, y, pch = pch,ylim = ylim, xlim= xlim,…)
ok <- is.finite(x) & is.finite(y)
if (any(ok))
abline(lm(y[ok]~ x[ok]),
col = col.lm, …)
}
panel.lm <- function (x, y, pch = par("pch"), col.lm = "red", ...)
{ ymin <- min(y)
ymax <- max(y)
xmin <- min(x)
xmax <- max(x)
ylim <- c(min(ymin,xmin),max(ymax,xmax))
xlim <- ylim
points(x, y, pch = pch,ylim = ylim, xlim= xlim,…)
ok <- is.finite(x) & is.finite(y)
if (any(ok))
abline(lm(y[ok]~ x[ok]),
col = col.lm, …)
}
panel.lm <- function (x, y, pch = par("pch"), col.lm = "red", ...)
{ ymin <- min(y)
ymax <- max(y)
xmin <- min(x)
xmax <- max(x)
ylim <- c(min(ymin,xmin),max(ymax,xmax))
xlim <- ylim
points(x, y, pch = pch,ylim = ylim, xlim= xlim,…)
ok <- is.finite(x) & is.finite(y)
if (any(ok))
abline(lm(y[ok]~ x[ok]),
col = col.lm, ...)
}
ok <- is.finite(x) & is.finite(y)
panel.lm <- function (x, y, pch = par("pch"), col.lm = "red", ...)
{ ymin <- min(y)
ymax <- max(y)
xmin <- min(x)
xmax <- max(x)
ylim <- c(min(ymin,xmin),max(ymax,xmax))
xlim <- ylim
points(x, y, pch = pch,ylim = ylim, xlim= xlim,...)
ok <- is.finite(x) & is.finite(y)
if (any(ok))
abline(lm(y[ok]~ x[ok]),
col = col.lm, ...)
}
## Next, R please make me a series of pairs plots comparing all the varables, and list correlation vaues:
panel.cor.scale <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex )
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.lm)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
pairs.panels(corrdf)
chart.Correlation(corrdf, method = "pearson", pch = 21) # bg = corrdf$LinearR2_CO2,
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
chart.Correlation(corrdf, method = "pearson", pch = 21) # bg = corrdf$LinearR2_CO2,
pairs.panels(corrdf)
## the following code and figure is adapted from the help file for pairs
##   put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
#first create a function (panel.cor)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
# now use the function for the epi data. (see figure)
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
?format
format(c(r, 0.123456789), digits=digits)
pairs.panels(corrdf, smooth=FALSE)
pairs.panels(corrdf)
pairs.panels(corrdf, scale=TRUE)
pairs.panels(corrdf, scale=FALSE)
pairs.panels(corrdf, smooth=TRUE)
pairs.panels(corrdf, smooth=TRUE, scale=TRUE)
pairs.panels(corrdf, smooth=TRUE, scale=TRUE)
pairs.panels(corrdf, smooth=FALSE, scale=TRUE)
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
pairs.panels(corrdf, smooth=FALSE, scale=FALSE)
pairs.panels(corrdf, smooth=TRUE, scale=TRUE)
pairs.panels(corrdf, smooth=FALSE, scale=TRUE)
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
pairs.panels(corrdf, smooth=FALSE, scale=FALSE)
zen()
cococodepath = "~/Documents/GITHUB/RPersonalFunctionsChristine/"
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
pairs(corrdf, smooth = TRUE, lm=TRUE)
# Fluxes-DataQuality.R
# how good are the fits for the fluxes?
# disrupted N project
# CS O'Connell, UMN EEB/IonE
########################################################################
# BRING IN DATA, MAKE DATAFRAME
fluxesfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Flux-Data-Rprocessed/fluxesfull.csv", stringsAsFactors=FALSE)
samplenum <- dim(fluxesfull)[1]/3 # sample size of chambers (div by 3 because each chamber has a CO2, CH4 and N2O row)
########################################################################
# DATA QUALITY: R^2 INFO
LinearR2_N2O <- fluxesfull$LinearR2[(fluxesfull$GasType)=="N2O"]
QuadR2_N2O <- fluxesfull$QuadR2[(fluxesfull$GasType)=="N2O"]
LinearR2_CO2 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CO2"]
QuadR2_CO2 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CO2"]
LinearR2_CH4 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CH4"]
QuadR2_CH4 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CH4"]
## histograms of CO2, CH4 and N2O R^2 values
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "R2-fluxes-histograms.png", sep=""),width=6,height=6,units="in",res=400)
# make plot
par(mfrow=c(3,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
hist(LinearR2_N2O, main="")
hist(QuadR2_N2O, main="")
hist(LinearR2_CO2, main="")
hist(QuadR2_CO2, main="")
hist(LinearR2_CH4, main="")
hist(QuadR2_CH4, main="")
title(substitute(paste(R^2, " Histograms, Sample Size = ", samplenum, " chambers"), list(samplenum = samplenum)), outer=TRUE)
dev.off()
########################################################################
# DATA QUALITY: CO2, N2O AND CH4 CORRELATION
# correlation matrix
corrdf <- data.frame(LinearR2_CO2,LinearR2_N2O,LinearR2_CH4,QuadR2_CO2,QuadR2_N2O,QuadR2_CH4)
z <- cor(corrdf)
require(lattice)
levelplot(z)
pairs(corrdf, smooth = TRUE, lm=TRUE)
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
zen()
# Fluxes-DataQuality.R
# how good are the fits for the fluxes?
# disrupted N project
# CS O'Connell, UMN EEB/IonE
########################################################################
# BRING IN DATA, MAKE DATAFRAME
fluxesfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Flux-Data-Rprocessed/fluxesfull.csv", stringsAsFactors=FALSE)
samplenum <- dim(fluxesfull)[1]/3 # sample size of chambers (div by 3 because each chamber has a CO2, CH4 and N2O row)
########################################################################
# DATA QUALITY: R^2 INFO
LinearR2_N2O <- fluxesfull$LinearR2[(fluxesfull$GasType)=="N2O"]
QuadR2_N2O <- fluxesfull$QuadR2[(fluxesfull$GasType)=="N2O"]
LinearR2_CO2 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CO2"]
QuadR2_CO2 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CO2"]
LinearR2_CH4 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CH4"]
QuadR2_CH4 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CH4"]
## histograms of CO2, CH4 and N2O R^2 values
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "R2-fluxes-histograms.png", sep=""),width=6,height=6,units="in",res=400)
# make plot
par(mfrow=c(3,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
hist(LinearR2_N2O, main="")
hist(QuadR2_N2O, main="")
hist(LinearR2_CO2, main="")
hist(QuadR2_CO2, main="")
hist(LinearR2_CH4, main="")
hist(QuadR2_CH4, main="")
title(substitute(paste(R^2, " Histograms, Sample Size = ", samplenum, " chambers"), list(samplenum = samplenum)), outer=TRUE)
dev.off()
########################################################################
# DATA QUALITY: CO2, N2O AND CH4 CORRELATION
# correlation matrix
corrdf <- data.frame(LinearR2_CO2,LinearR2_N2O,LinearR2_CH4,QuadR2_CO2,QuadR2_N2O,QuadR2_CH4)
z <- cor(corrdf)
require(lattice)
levelplot(z)
# bring in fancy correlation graph code
cococodepath = "~/Documents/GITHUB/RPersonalFunctionsChristine/"
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
z <- cor(corrdf)
require(lattice)
levelplot(z)
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
pairs.panels(corrdf, smooth=FALSE, scale=FALSE)
pairs.panels(corrdf, smooth=FALSE, scale=TRUE)
pairs.panels(corrdf, smooth=FALSE, scale=FALSE)
pairs.panels(corrdf, smooth=FALSE, scale=TRUE)
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor)
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
z <- cor(corrdf);require(lattice);levelplot(z)
pairs.panels.loess <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.smooth)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.lm)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
pairs.panels.loess(corrdf, smooth=TRUE, scale=FALSE)
zen()
# Fluxes-DataQuality.R
# how good are the fits for the fluxes?
# disrupted N project
# CS O'Connell, UMN EEB/IonE
########################################################################
# BRING IN DATA, MAKE DATAFRAME
fluxesfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Flux-Data-Rprocessed/fluxesfull.csv", stringsAsFactors=FALSE)
samplenum <- dim(fluxesfull)[1]/3 # sample size of chambers (div by 3 because each chamber has a CO2, CH4 and N2O row)
########################################################################
# DATA QUALITY: R^2 INFO
LinearR2_N2O <- fluxesfull$LinearR2[(fluxesfull$GasType)=="N2O"]
QuadR2_N2O <- fluxesfull$QuadR2[(fluxesfull$GasType)=="N2O"]
LinearR2_CO2 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CO2"]
QuadR2_CO2 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CO2"]
LinearR2_CH4 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CH4"]
QuadR2_CH4 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CH4"]
## histograms of CO2, CH4 and N2O R^2 values
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "R2-fluxes-histograms.png", sep=""),width=6,height=6,units="in",res=400)
# make plot
par(mfrow=c(3,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
hist(LinearR2_N2O, main="")
hist(QuadR2_N2O, main="")
hist(LinearR2_CO2, main="")
hist(QuadR2_CO2, main="")
hist(LinearR2_CH4, main="")
hist(QuadR2_CH4, main="")
title(substitute(paste(R^2, " Histograms, Sample Size = ", samplenum, " chambers"), list(samplenum = samplenum)), outer=TRUE)
dev.off()
########################################################################
# DATA QUALITY: CO2, N2O AND CH4 CORRELATION
# correlation matrix
corrdf <- data.frame(LinearR2_CO2,LinearR2_N2O,LinearR2_CH4,QuadR2_CO2,QuadR2_N2O,QuadR2_CH4)
# bring in fancy correlation graph code
cococodepath = "~/Documents/GITHUB/RPersonalFunctionsChristine/"
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
## correlation between the CO2 and N2O R^2 values
# correlation info
cor1t <- cor.test(LinearR2_CO2,LinearR2_N2O)
cor2t <- cor.test(QuadR2_CO2,QuadR2_N2O)
cor_stars <- numeric(length=2)
# cycle through to set number of stars
for (i in 1:2 ) {
corpval <- paste("cor",i,"t$p.value",sep="")
if(eval(parse(text=corpval)) < 0.001){
cor_stars[i] <- "***"
} else if(eval(parse(text=corpval)) < 0.01){
cor_stars[i] <- "**"
} else if(eval(parse(text=corpval)) < 0.05){
cor_stars[i] <- "*"
} else {
cor_stars[i] <- " "
}
}
# to make abline
r2linearlm <- lm(LinearR2_N2O ~ LinearR2_CO2)
r2quadlm <- lm(QuadR2_N2O ~ QuadR2_CO2)
# make plot
par(mfrow=c(1,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
#plot1
plot(LinearR2_CO2,LinearR2_N2O)
abline(r2linearlm)
legend('topleft', legend = paste("ρ =", round(cor1t$estimate,4), cor_stars[1]), bty = 'n')
#plot2
plot(QuadR2_CO2,QuadR2_N2O)
abline(r2quadlm)
legend('topleft', legend = paste("ρ =", round(cor2t$estimate,4), cor_stars[2]), bty = 'n')
zen()
# Fluxes-DataQuality.R
# how good are the fits for the fluxes?
# disrupted N project
# CS O'Connell, UMN EEB/IonE
########################################################################
# BRING IN DATA, MAKE DATAFRAME
fluxesfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Flux-Data-Rprocessed/fluxesfull.csv", stringsAsFactors=FALSE)
samplenum <- dim(fluxesfull)[1]/3 # sample size of chambers (div by 3 because each chamber has a CO2, CH4 and N2O row)
########################################################################
# DATA QUALITY: R^2 INFO
LinearR2_N2O <- fluxesfull$LinearR2[(fluxesfull$GasType)=="N2O"]
QuadR2_N2O <- fluxesfull$QuadR2[(fluxesfull$GasType)=="N2O"]
LinearR2_CO2 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CO2"]
QuadR2_CO2 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CO2"]
LinearR2_CH4 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CH4"]
QuadR2_CH4 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CH4"]
## histograms of CO2, CH4 and N2O R^2 values
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "R2-fluxes-histograms.png", sep=""),width=6,height=6,units="in",res=400)
# make plot
par(mfrow=c(3,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
hist(LinearR2_N2O, main="")
hist(QuadR2_N2O, main="")
hist(LinearR2_CO2, main="")
hist(QuadR2_CO2, main="")
hist(LinearR2_CH4, main="")
hist(QuadR2_CH4, main="")
title(substitute(paste(R^2, " Histograms, Sample Size = ", samplenum, " chambers"), list(samplenum = samplenum)), outer=TRUE)
dev.off()
########################################################################
# DATA QUALITY: CO2, N2O AND CH4 CORRELATION
# correlation matrix
corrdf <- data.frame(LinearR2_CO2,LinearR2_N2O,LinearR2_CH4,QuadR2_CO2,QuadR2_N2O,QuadR2_CH4)
# bring in fancy correlation graph code
cococodepath = "~/Documents/GITHUB/RPersonalFunctionsChristine/"
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "n2o-co2-ch4-correlation.png", sep=""),width=6,height=6,units="in",res=200)
# use those functions
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
# other options
# pairs.panels.loess(corrdf, smooth=TRUE, scale=FALSE) # loess not lm
# pairs(corrdf, lower.panel=panel.smooth, upper.panel=panel.cor) # no hist, loess smooth
# z <- cor(corrdf);require(lattice);levelplot(z) # levelplot
dev.off()
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(corrdf, method = "circle")
z <- cor(corrdf)
corrplot(corrdf, method = "circle")
corrplot(z, method = "circle")
corrplot(z, method = "ellipse")
zen()
# Fluxes-DataQuality.R
# how good are the fits for the fluxes?
# disrupted N project
# CS O'Connell, UMN EEB/IonE
########################################################################
# BRING IN DATA, MAKE DATAFRAME
fluxesfull <- read.csv("~/Documents/GITHUB/cso011code_TanguroN2OLosses/GC-Data-Raw-R/Flux-Data-Rprocessed/fluxesfull.csv", stringsAsFactors=FALSE)
samplenum <- dim(fluxesfull)[1]/3 # sample size of chambers (div by 3 because each chamber has a CO2, CH4 and N2O row)
########################################################################
# DATA QUALITY: R^2 INFO
LinearR2_N2O <- fluxesfull$LinearR2[(fluxesfull$GasType)=="N2O"]
QuadR2_N2O <- fluxesfull$QuadR2[(fluxesfull$GasType)=="N2O"]
LinearR2_CO2 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CO2"]
QuadR2_CO2 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CO2"]
LinearR2_CH4 <- fluxesfull$LinearR2[(fluxesfull$GasType)=="CH4"]
QuadR2_CH4 <- fluxesfull$QuadR2[(fluxesfull$GasType)=="CH4"]
## histograms of CO2, CH4 and N2O R^2 values
# where to save figure
pathsavefigures = "~/Documents/GITHUB/cso011code_TanguroN2OLosses/TanguroN2OLosses-Analysis/Fluxes-DataQuality/"
# make plot and save
png(file = paste(pathsavefigures, "R2-fluxes-histograms.png", sep=""),width=6,height=6,units="in",res=400)
# make plot
par(mfrow=c(3,2),oma=c(0,0,2,0),mar = c(5.1, 4.1, 2.1, 2.1))
hist(LinearR2_N2O, main="")
hist(QuadR2_N2O, main="")
hist(LinearR2_CO2, main="")
hist(QuadR2_CO2, main="")
hist(LinearR2_CH4, main="")
hist(QuadR2_CH4, main="")
title(substitute(paste(R^2, " Histograms, Sample Size = ", samplenum, " chambers"), list(samplenum = samplenum)), outer=TRUE)
dev.off()
########################################################################
# DATA QUALITY: CO2, N2O AND CH4 CORRELATION
# correlation matrix
corrdf <- data.frame(LinearR2_CO2,LinearR2_N2O,LinearR2_CH4,QuadR2_CO2,QuadR2_N2O,QuadR2_CH4)
cococodepath = "~/Documents/GITHUB/RPersonalFunctionsChristine/"
source(paste(cococodepath, "correlation-graphs-fancy.R", sep=""))
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
z <- cor(corrdf);corrplot(z, method = "ellipse")
pairs.panels(corrdf, smooth=TRUE, scale=FALSE)
z <- cor(corrdf);corrplot(z, method = "ellipse")
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, p.mat = res1[[1]], sig.level = 0.2)
z <- cor(corrdf);corrplot(z, method = "ellipse")
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, method = "ellipse", p.mat = res1[[1]], sig.level = 0.2)
z <- cor(corrdf);corrplot(z, method = "ellipse")
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, method = "ellipse", p.mat = res1[[1]], sig.level = 0.2)
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, method = "ellipse", p.mat = res1[[1]], sig.level = 0.05)
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, method = "ellipse", p.mat = res1[[1]], sig.level = 0.05) # specialized the insignificant value according to the significant level
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, p.mat = res1[[1]], insig = "p-value", sig.level = -1) # add all p-values
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, p.mat = res1[[1]], insig = "p-value", sig.level = 0.05) # add all p-values
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, p.mat = res1[[1]], insig = "p-value", method = "ellipse", sig.level = -1) # add all p-values
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, method = "ellipse", p.mat = res1[[1]], sig.level = 0.05) # specialized the insignificant value according to the significant level
res1 <- cor.mtest(corrdf, 0.95); res2 <- cor.mtest(corrdf, 0.99);corrplot(z, p.mat = res1[[1]], insig = "p-value", method = "ellipse", sig.level = -1) # add all p-values
